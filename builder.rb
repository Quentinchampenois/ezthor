# frozen_string_literal: true

# Read and build new CLI
class Builder
  attr_accessor :content

  def initialize(file, target)
    @target = target
    @template = YAML.load_file(file)
  end

  def gen_cli!
    @template['name'] = Interpreter.camelize(@template['name'])
    "
# Generated by easycli

require 'thor'

# #{@template['description']}
class #{@template['name']} < Thor
  #{Interpreter.class_opts(@template['options'])}

    #{generate_cmds}
end

#{@template['name']}.start(ARGV)
"
  end

  def generate_cmds
    @template['commands'].map do |key, val|
      p = Interpreter.parameters(val['param'])

      "
  desc \"#{key}#{Interpreter.cmd_desc(p)}\", \"#{val['description']}\"
  #{Interpreter.options(val['options'])}
  def #{key}#{Interpreter.print_params(p)}
    puts \"#{val['cmd']}\"
  end
"
    end.join('')
  end

  def store!
    @content ||= gen_cli!
    puts "Creating CLI in '#{@target}'..."
    File.write(@target, @content, mode: 'w+')
    @content
  end
end
