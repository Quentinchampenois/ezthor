# frozen_string_literal: true

# Thor CLI compiler

require 'yaml'
require 'byebug'

# source: https://apidock.com/rails/String/camelize
def camelize(string, uppercase_first_letter = true)
  if uppercase_first_letter
    string = string.sub(/^[a-z\d]*/) { |match| match.capitalize }
  else
    string = string.sub(/^(?:(?=\b|[A-Z_])|\w)/) { |match| match.downcase }
  end
  string.gsub(/(?:_|(\/))([a-z\d]*)/) { "#{$1}#{$2.capitalize}" }.gsub("/", "::")
end

def print_desc(ary)
  return '' if ary.nil? || ary.empty?

  str = ary.select { |obj| obj['default'].nil? }.map { |item| item['name'].upcase }.join(' ')
  " #{str}"
end

def parameters(ary)
  return '' if ary.nil? || ary.empty?

  ary.select { |obj| obj['default'].nil? } + ary.reject { |obj| obj['default'].nil? }
end

def print_params(ary)
  return if ary.nil? || ary.empty?

  params = ary.map { |hash| param_format!(hash) }

  "(#{params.join(', ')})"
end

def param_format!(param_h)
  case param_h['default']
  when nil
    param_h['name'].to_s
  when 'nil', 'true', 'false', true, false
    "#{param_h['name']}=#{param_h['default']}"
  else
    "#{param_h['name']}=\"#{param_h['default']}\""
  end
end

def options(ary)
  return '' if ary.nil? || ary.empty?

  add_opt = lambda do |str, opt, output|
    return '' if opt.nil?
    return '' if opt.respond_to?(:empty?) && opt.empty?

    if str.end_with?(",")
      " #{output}"
    else
      ", #{output}"
    end
  end

  ary.map do |opt|
    opt_desc = ''
    opt_desc += add_opt.call(opt_desc, opt['required'], "required: :#{opt["required"]}")
    opt_desc += add_opt.call(opt_desc, opt['short'], "aliases: '-#{opt["short"]}'")
    opt_desc += add_opt.call(opt_desc, opt['desc'], "banner: '#{opt["desc"]}'")
    opt_desc += add_opt.call(opt_desc, opt['default'], "default: '#{opt["default"]}'")

    opt_desc = opt_desc[0..-2] if opt_desc.end_with?(",")

    "option :#{opt['name']}#{opt_desc}"
  end.join("\n  ")
end

core = YAML.load_file('commands.yml')

defs = core['commands'].map do |key, val|
  p = parameters(val['param'])

  "
  desc \"#{key}#{print_desc(p)}\", \"#{val['description']}\"
  #{options(val["options"])}
  def #{key}#{print_params(p)}
    puts \"#{val['cmd']}\"
  end
"
end


puts "
# Generated by easycli

require 'thor'

# #{core['description']}
class #{camelize core['name']} < Thor
  #{defs.join('')}
end

#{camelize core['name']}.start(ARGV)
"
